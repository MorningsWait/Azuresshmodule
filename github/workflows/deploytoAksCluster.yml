on: [push]
jobs:
  build-and-deploy-tinc-router:
    if: ${{ github.ref == 'refs/heads/tinc-router' }}
    runs-on: ubuntu-latest
    steps:
    
    - uses: actions/checkout@master
    
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create ACR
      id: create-acr
      run: |
        az acr create -n cssauth -g cssautha080-rg --location "Japan East" --sku Basic --admin-enabled
        echo "::set-output name=acr_username::`az acr credential show -n cssauth --query username | xargs`"
        echo "::set-output name=acr_password::`az acr credential show -n cssauth --query passwords[0].value | xargs`"
        echo "::add-mask::`az acr credential show -n cssauth --query passwords[0].value | xargs`"
    - uses: azure/docker-login@v1
      with:
        login-server: cssauth.azurecr.io
        username: ${{ steps.create-acr.outputs.acr_username }}
        password: ${{ steps.create-acr.outputs.acr_password }}

    
    - uses: azure/k8s-set-context@v1
      id: login
      with:
         kubeconfig: ${{ secrets.aks_aksdevjpeastsandbox_kubeConfig }}
    
    - name: Create namespace
      run: |
        namespacePresent=`kubectl get namespace | grep product | wc -l`
        if [ $namespacePresent -eq 0 ]
        then
            echo `kubectl create namespace product`
        fi
    - uses: azure/k8s-create-secret@v1
      with:
        namespace: product
        container-registry-url: cssauth.azurecr.io
        container-registry-username: ${{ steps.create-acr.outputs.acr_username }}
        container-registry-password: ${{ steps.create-acr.outputs.acr_password }}
        secret-name: aksdevjpeastdockerauth
       
    - uses: azure/k8s-deploy@v1.2
      with:
        namespace: product
        manifests: |
          manifests/tinc-router/deployment.yml
          manifests/tinc-router/service.yml
          manifests/tinc-router/ingress.yml
          
        images: |
          cssauth.azurecr.io/aksdevjpeastsandbox:latest
        imagepullsecrets: |
          aksdevjpeastdockerauth
  build-and-deploy-tinc-mesh-tunnel:
    if: ${{ github.ref == 'refs/heads/tinc-mesh-tunnel' }}
    runs-on: ubuntu-latest
    steps:
    
    - uses: actions/checkout@master
    
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create ACR
      id: create-acr
      run: |
        az acr create -n cssauth -g cssautha080-rg --location "Japan East" --sku Basic --admin-enabled
        echo "::set-output name=acr_username::`az acr credential show -n cssauth --query username | xargs`"
        echo "::set-output name=acr_password::`az acr credential show -n cssauth --query passwords[0].value | xargs`"
        echo "::add-mask::`az acr credential show -n cssauth --query passwords[0].value | xargs`"
    - uses: azure/docker-login@v1
      with:
        login-server: cssauth.azurecr.io
        username: ${{ steps.create-acr.outputs.acr_username }}
        password: ${{ steps.create-acr.outputs.acr_password }}

    
    - uses: azure/k8s-set-context@v1
      id: login
      with:
         kubeconfig: ${{ secrets.aks_aksdevjpeastsandbox_kubeConfig }}
    
    - name: Create namespace
      run: |
        namespacePresent=`kubectl get namespace | grep product | wc -l`
        if [ $namespacePresent -eq 0 ]
        then
            echo `kubectl create namespace product`
        fi
    - uses: azure/k8s-create-secret@v1
      with:
        namespace: product
        container-registry-url: cssauth.azurecr.io
        container-registry-username: ${{ steps.create-acr.outputs.acr_username }}
        container-registry-password: ${{ steps.create-acr.outputs.acr_password }}
        secret-name: aksdevjpeastdockerauth
       
    - uses: azure/k8s-deploy@v1.2
      with:
        namespace: product
        manifests: |
          manifests/tinc-mesh-tunnel/deployment.yml
          
        images: |
          cssauth.azurecr.io/aksdevjpeastsandbox:latest
        imagepullsecrets: |
          aksdevjpeastdockerauth   
